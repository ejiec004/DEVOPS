-------------------------
    SQL sub Query
-------------------------

Highest rated movie

method:1 

SELECT MAX(score) FROM ebbu.movies;

SELECT * FROM ebbu.movies
WHERE score = 9.3

```````````````````````````
 method :2 (SUB QUERY) 
````````````````````````

SELECT * FROM ebbu.movie 
WHERE score = (SELECT MAX(score) FROM ebbu.movies)

----------------------------------------
Types of subqueries
 
1.Returned Data

 - Scalar Subquery. 
 - Row sub query. 
 - tabular subquery.

2. Working

 - independent subquery
 - Corelated subquery

-------------------------------------------
Indepedent Subquery -Scalar Subquery
--------------------------------------------

1. Find the movie with highest profit(vs order by) 
  
-  SELECT * FROM movies 
   WHERE (gross -budget) =( SELECT MAX(gross- budget)  
							FROM movies)

by using Order by:

-  SELECT * FROM movies
   ORDER BY (gross - budget) DESC LIMIT 1;

2.Find how many movies have a rating > the avg of all the movie ratings(Find the 
count of above average movies)

- SELECT COUNT(*) FROM movies 
  WHERE  score > (SELECT AVG(score) 
                   FROM movies);

3. Find the highest rated movie of 2000

- SELECT * FROM movies
  WHERE YEAR =2000 AND score = (SELECT MAX(score) FROM movies
                               WHERE year =2000)

4. Find the highest rated movie among all movies whose number of votes are > 
the dataset avg votes

- SELECT * from movies 
  WHERE score = (SELECT MAX(score) FROM movies 
               WHERE votes > (SELECT AVG(votes)
                               FROM movies));

-----------------------------------------------------------
  Independent Subquery - Row Subquery(One Col Multi Rows)
------------------------------------------------------------
1. Find all users who never ordered

- SELECT * FROM users 
  WHERE user_id NOT IN (SELECT DISTINCT(user_id )
                         FROM orders);

2. Find all the movies made by top 3 directors(in terms of total gross income)    <Common Table Expression>

 - WITH top_directors AS (SELECT director
					FROM movies 
					GROUP BY director 
					ORDER BY SUM(gross) DESC 
					LIMIT 3)
  SELECT * FROM movies 
  WHERE director IN (SELECT * FROM top_directors); 


3. Find all movies of all those actors whose filmography's avg rating > 8.5(take 
25000 votes as cutoff)

- SELECT * FROM movies 
  WHERE  star IN (SELECT star FROM movies 
                   WHERE votes > 25000
				   GROUP BY star 
				    HAVING AVG(score) > 8.5)
				   AND votes > 250000
------------------------------------------------------------
Independent Subquery - Table Subquery(Multi Col Multi Row
-----------------------------------------------------------

1. Find the most profitable movie of each year

- SELECT * FROM movies 
  WHERE (year, gross-budget) IN (SELECT year , MAX(gross-budget) 
                                  FROM movies
				GROUP BY year )

2. Find the highest rated movie of each genre votes cutoff of 25000 

- SELECT * FROM movies WHERE (genre,score) IN (SELECT genre, MAX(score)
                                             FROM movies 
                                             WHERE  votes > 25000
                                             GROUP BY genre)
   AND votes >25000

3. Find the highest grossing movies of top 5 actor/director combo in terms of 
total gross income

- WITH top_duos AS (
		     SELECT star, director ,MAX(gross)
		     FROM movies
		     GROUP BY star,director
		     ORDER BY SUM(gross) DESC LIMIT 5)
 SELECT * FROM movies 
 WHERE (star,director ,gross ) IN (SELECT * FROM top_duos)

--------------------------------------------------------------------------------------
                  Correlated Subquery
--------------------------------------------------------------------------------------

1. Find all the movies that have a rating higher than the average rating of movies in the same genre

-  SELECT * FROM movies m1
 WHERE score > ( SELECT AVG(score) FROM movies m2 WHERE m2.genre = m1.genre)


2. Find the favorite food of each customer.

-  WITH fav_food AS (SELECT t2.user_id,name ,f_name,COUNT(*) AS'frequency' FROM users t1
		 JOIN orders t2 ON t1.user_id = t2.user_id
		 JOIN order_details t3 ON t2.order_id = t3.order_id
		 JOIN food t4 ON t3.f_id = t4.f_id
		 GROUP BY t2.user_id ,t4.f_id)
  
  SELECT * FROM fav_food f1
  WHERE frequency = (SELECT MAX(frequency)
                       FROM fav_food f2 
                       WHERE f2.user_id= f1.user_id) 

-------------------------------------------------------------------------------------
                     Usage with SELECT
------------------------------------------------------------------------------------- 

1. Get the percentage of votes for each movie compared to the total number of votes.

- SELECT name, (votes/(SELECT SUM(votes) FROM movies))*100 FROM movies ; 

2. Display all movies names , genres, score and avg(score) of genre 

-  SELECT name,genre,score,(SELECT AVG(score) FROM movies m2 
   WHERE m2.genre = m1.genre)
   FROM movies m1

-----------------------------------------------------------------------------------
                         Usage With FROM 
-----------------------------------------------------------------------------------

1. Display average rating of all the restaurants

- SELECT r_name ,avg_rating 
  FROM(SELECT r_id ,AVG(restaurant_rating) AS 'avg_rating'
	FROM  orders 
	GROUP BY r_id) t1 JOIN restaurants t2
        ON t1.r_id =t2.r_id

--------------------------------------------------------------------------------------
                         Usage of HAVING
--------------------------------------------------------------------------------------

1. Find Genres having avg_score > avg score of all the movies

-  SELECT genre, AVG(score)
   FROM movies
   GROUP BY genre
   HAVING AVG(score) > ( SELECT AVG(score) FROM movies);



















